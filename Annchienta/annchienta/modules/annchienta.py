# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_annchienta', [dirname(__file__)])
        except ImportError:
            import _annchienta
            return _annchienta
        if fp is not None:
            try:
                _mod = imp.load_module('_annchienta', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _annchienta = swig_import_helper()
    del swig_import_helper
else:
    import _annchienta
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


TilePoint = _annchienta.TilePoint
IsometricPoint = _annchienta.IsometricPoint
MapPoint = _annchienta.MapPoint
ScreenPoint = _annchienta.ScreenPoint
class Point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _annchienta.Point_x_set
    __swig_getmethods__["x"] = _annchienta.Point_x_get
    if _newclass:x = _swig_property(_annchienta.Point_x_get, _annchienta.Point_x_set)
    __swig_setmethods__["y"] = _annchienta.Point_y_set
    __swig_getmethods__["y"] = _annchienta.Point_y_get
    if _newclass:y = _swig_property(_annchienta.Point_y_get, _annchienta.Point_y_set)
    __swig_setmethods__["z"] = _annchienta.Point_z_set
    __swig_getmethods__["z"] = _annchienta.Point_z_get
    if _newclass:z = _swig_property(_annchienta.Point_z_get, _annchienta.Point_z_set)
    def __init__(self, *args): 
        this = _annchienta.new_Point(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_Point
    __del__ = lambda self : None;
    def getPointType(self): return _annchienta.Point_getPointType(self)
    def convert(self, *args): return _annchienta.Point_convert(self, *args)
    def to(self, *args): return _annchienta.Point_to(self, *args)
    def isEnclosedBy(self, *args): return _annchienta.Point_isEnclosedBy(self, *args)
    def distance(self, *args): return _annchienta.Point_distance(self, *args)
    def noTypeCheckSquaredDistance(self, *args): return _annchienta.Point_noTypeCheckSquaredDistance(self, *args)
Point_swigregister = _annchienta.Point_swigregister
Point_swigregister(Point)

SMALL_STRING_SIZE = _annchienta.SMALL_STRING_SIZE
DEFAULT_STRING_SIZE = _annchienta.DEFAULT_STRING_SIZE
LARGE_STRING_SIZE = _annchienta.LARGE_STRING_SIZE
class Engine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Engine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Engine, name)
    __repr__ = _swig_repr
    def getWriteDirectory(self): return _annchienta.Engine_getWriteDirectory(self)
    def setWriteDirectory(self, *args): return _annchienta.Engine_setWriteDirectory(self, *args)
    def write(self, *args): return _annchienta.Engine_write(self, *args)
    def isValidFile(self, *args): return _annchienta.Engine_isValidFile(self, *args)
    def setWindowTitle(self, *args): return _annchienta.Engine_setWindowTitle(self, *args)
    def getTicks(self): return _annchienta.Engine_getTicks(self)
    def delay(self, *args): return _annchienta.Engine_delay(self, *args)
    def setPythonBoolean(self, *args): return _annchienta.Engine_setPythonBoolean(self, *args)
    def __init__(self): 
        this = _annchienta.new_Engine()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_Engine
    __del__ = lambda self : None;
Engine_swigregister = _annchienta.Engine_swigregister
Engine_swigregister(Engine)


def quit():
  return _annchienta.quit()
quit = _annchienta.quit

def getEngine():
  return _annchienta.getEngine()
getEngine = _annchienta.getEngine
class LogManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogManager, name)
    __repr__ = _swig_repr
    def enable(self, *args): return _annchienta.LogManager_enable(self, *args)
    def isEnabled(self): return _annchienta.LogManager_isEnabled(self)
    def logToFile(self, *args): return _annchienta.LogManager_logToFile(self, *args)
    def isLogToFile(self): return _annchienta.LogManager_isLogToFile(self)
    def message(self, *args): return _annchienta.LogManager_message(self, *args)
    def warning(self, *args): return _annchienta.LogManager_warning(self, *args)
    def error(self, *args): return _annchienta.LogManager_error(self, *args)
    def __init__(self): 
        this = _annchienta.new_LogManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_LogManager
    __del__ = lambda self : None;
LogManager_swigregister = _annchienta.LogManager_swigregister
LogManager_swigregister(LogManager)

def init(writeDir = "."):
  return _annchienta.init(writeDir)
init = _annchienta.init


def getLogManager():
  return _annchienta.getLogManager()
getLogManager = _annchienta.getLogManager
class VideoManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VideoManager, name)
    __repr__ = _swig_repr
    def setVideoMode(self, *args): return _annchienta.VideoManager_setVideoMode(self, *args)
    def isVideoModeSet(self): return _annchienta.VideoManager_isVideoModeSet(self)
    def getScreenWidth(self): return _annchienta.VideoManager_getScreenWidth(self)
    def getScreenHeight(self): return _annchienta.VideoManager_getScreenHeight(self)
    def isFullScreen(self): return _annchienta.VideoManager_isFullScreen(self)
    def getVideoScale(self): return _annchienta.VideoManager_getVideoScale(self)
    def getNumberOfBackBuffers(self): return _annchienta.VideoManager_getNumberOfBackBuffers(self)
    def reset(self): return _annchienta.VideoManager_reset(self)
    def identity(self): return _annchienta.VideoManager_identity(self)
    def translate(self, *args): return _annchienta.VideoManager_translate(self, *args)
    def rotate(self, *args): return _annchienta.VideoManager_rotate(self, *args)
    def scale(self, *args): return _annchienta.VideoManager_scale(self, *args)
    def push(self): return _annchienta.VideoManager_push(self)
    def pop(self): return _annchienta.VideoManager_pop(self)
    def clear(self): return _annchienta.VideoManager_clear(self)
    def flip(self): return _annchienta.VideoManager_flip(self)
    def setClearColor(self, red = 0xff, green = 0xff, blue = 0xff, alpha = 0xff): return _annchienta.VideoManager_setClearColor(self, red, green, blue, alpha)
    def setColor(self, red = 0xff, green = 0xff, blue = 0xff, alpha = 0xff): return _annchienta.VideoManager_setColor(self, red, green, blue, alpha)
    def setAlpha(self, alpha = 0xff): return _annchienta.VideoManager_setAlpha(self, alpha)
    def setClippingRectangle(self, *args): return _annchienta.VideoManager_setClippingRectangle(self, *args)
    def disableClipping(self): return _annchienta.VideoManager_disableClipping(self)
    def drawLine(self, *args): return _annchienta.VideoManager_drawLine(self, *args)
    def drawTriangle(self, *args): return _annchienta.VideoManager_drawTriangle(self, *args)
    def drawRectangle(self, *args): return _annchienta.VideoManager_drawRectangle(self, *args)
    def drawQuad(self, *args): return _annchienta.VideoManager_drawQuad(self, *args)
    def drawSurface(self, *args): return _annchienta.VideoManager_drawSurface(self, *args)
    def drawPattern(self, *args): return _annchienta.VideoManager_drawPattern(self, *args)
    def drawString(self, *args): return _annchienta.VideoManager_drawString(self, *args)
    def drawStringCentered(self, *args): return _annchienta.VideoManager_drawStringCentered(self, *args)
    def drawStringRight(self, *args): return _annchienta.VideoManager_drawStringRight(self, *args)
    def grabBuffer(self, *args): return _annchienta.VideoManager_grabBuffer(self, *args)
    def storeBuffer(self, *args): return _annchienta.VideoManager_storeBuffer(self, *args)
    def restoreBuffer(self, *args): return _annchienta.VideoManager_restoreBuffer(self, *args)
    def boxBlur(self, *args): return _annchienta.VideoManager_boxBlur(self, *args)
    def __init__(self): 
        this = _annchienta.new_VideoManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_VideoManager
    __del__ = lambda self : None;
VideoManager_swigregister = _annchienta.VideoManager_swigregister
VideoManager_swigregister(VideoManager)


def getVideoManager():
  return _annchienta.getVideoManager()
getVideoManager = _annchienta.getVideoManager
CinematicMode = _annchienta.CinematicMode
InteractiveMode = _annchienta.InteractiveMode
class InputManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputManager, name)
    __repr__ = _swig_repr
    def update(self): return _annchienta.InputManager_update(self)
    def isRunning(self): return _annchienta.InputManager_isRunning(self)
    def stop(self): return _annchienta.InputManager_stop(self)
    def keyDown(self, *args): return _annchienta.InputManager_keyDown(self, *args)
    def keyTicked(self, *args): return _annchienta.InputManager_keyTicked(self, *args)
    def getMouseX(self): return _annchienta.InputManager_getMouseX(self)
    def getMouseY(self): return _annchienta.InputManager_getMouseY(self)
    def isMouseMoved(self): return _annchienta.InputManager_isMouseMoved(self)
    def buttonDown(self, *args): return _annchienta.InputManager_buttonDown(self, *args)
    def buttonTicked(self, *args): return _annchienta.InputManager_buttonTicked(self, *args)
    def getMousePoint(self): return _annchienta.InputManager_getMousePoint(self)
    def hover(self, *args): return _annchienta.InputManager_hover(self, *args)
    def clicked(self, *args): return _annchienta.InputManager_clicked(self, *args)
    def setInputControlledPerson(self, *args): return _annchienta.InputManager_setInputControlledPerson(self, *args)
    def getInputControlledPerson(self): return _annchienta.InputManager_getInputControlledPerson(self)
    def setInputMode(self, *args): return _annchienta.InputManager_setInputMode(self, *args)
    def getInputMode(self): return _annchienta.InputManager_getInputMode(self)
    def setInteractKey(self, *args): return _annchienta.InputManager_setInteractKey(self, *args)
    def getInteractKey(self): return _annchienta.InputManager_getInteractKey(self)
    def setCancelKey(self, *args): return _annchienta.InputManager_setCancelKey(self, *args)
    def getCancelKey(self): return _annchienta.InputManager_getCancelKey(self)
    def interactKeyTicked(self): return _annchienta.InputManager_interactKeyTicked(self)
    def cancelKeyTicked(self): return _annchienta.InputManager_cancelKeyTicked(self)
    def setMouseVisibility(self, *args): return _annchienta.InputManager_setMouseVisibility(self, *args)
    def __init__(self): 
        this = _annchienta.new_InputManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_InputManager
    __del__ = lambda self : None;
InputManager_swigregister = _annchienta.InputManager_swigregister
InputManager_swigregister(InputManager)


def getInputManager():
  return _annchienta.getInputManager()
getInputManager = _annchienta.getInputManager
class MapManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapManager, name)
    __repr__ = _swig_repr
    def setTileWidth(self, *args): return _annchienta.MapManager_setTileWidth(self, *args)
    def getTileWidth(self): return _annchienta.MapManager_getTileWidth(self)
    def setTileHeight(self, *args): return _annchienta.MapManager_setTileHeight(self, *args)
    def getTileHeight(self): return _annchienta.MapManager_getTileHeight(self)
    def setCameraX(self, *args): return _annchienta.MapManager_setCameraX(self, *args)
    def getCameraX(self): return _annchienta.MapManager_getCameraX(self)
    def setCameraY(self, *args): return _annchienta.MapManager_setCameraY(self, *args)
    def getCameraY(self): return _annchienta.MapManager_getCameraY(self)
    def cameraFollow(self, *args): return _annchienta.MapManager_cameraFollow(self, *args)
    def getCameraFollow(self): return _annchienta.MapManager_getCameraFollow(self)
    def cameraPeekAt(self, *args): return _annchienta.MapManager_cameraPeekAt(self, *args)
    def setUpdatesPerSecond(self, *args): return _annchienta.MapManager_setUpdatesPerSecond(self, *args)
    def setCurrentMap(self, *args): return _annchienta.MapManager_setCurrentMap(self, *args)
    def setNullMap(self): return _annchienta.MapManager_setNullMap(self)
    def getCurrentMap(self): return _annchienta.MapManager_getCurrentMap(self)
    def setMaxAscentHeight(self, *args): return _annchienta.MapManager_setMaxAscentHeight(self, *args)
    def getMaxAscentHeight(self): return _annchienta.MapManager_getMaxAscentHeight(self)
    def setMaxDescentHeight(self, *args): return _annchienta.MapManager_setMaxDescentHeight(self, *args)
    def getMaxDescentHeight(self): return _annchienta.MapManager_getMaxDescentHeight(self)
    def getObject(self, *args): return _annchienta.MapManager_getObject(self, *args)
    def setOnUpdateScript(self, *args): return _annchienta.MapManager_setOnUpdateScript(self, *args)
    def setOnUpdateCode(self, *args): return _annchienta.MapManager_setOnUpdateCode(self, *args)
    def run(self): return _annchienta.MapManager_run(self)
    def isRunning(self): return _annchienta.MapManager_isRunning(self)
    def stop(self): return _annchienta.MapManager_stop(self)
    def update(self, updateInput = True): return _annchienta.MapManager_update(self, updateInput)
    def updateOnce(self, updateInput = True): return _annchienta.MapManager_updateOnce(self, updateInput)
    def draw(self): return _annchienta.MapManager_draw(self)
    def renderFrame(self): return _annchienta.MapManager_renderFrame(self)
    def resync(self): return _annchienta.MapManager_resync(self)
    def __init__(self): 
        this = _annchienta.new_MapManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_MapManager
    __del__ = lambda self : None;
MapManager_swigregister = _annchienta.MapManager_swigregister
MapManager_swigregister(MapManager)


def getMapManager():
  return _annchienta.getMapManager()
getMapManager = _annchienta.getMapManager
class AudioManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioManager, name)
    __repr__ = _swig_repr
    def inittedSuccesfully(self): return _annchienta.AudioManager_inittedSuccesfully(self)
    def playSound(self, *args): return _annchienta.AudioManager_playSound(self, *args)
    def playMusic(self, *args): return _annchienta.AudioManager_playMusic(self, *args)
    def getPlayingMusic(self): return _annchienta.AudioManager_getPlayingMusic(self)
    def setVolume(self, *args): return _annchienta.AudioManager_setVolume(self, *args)
    def __init__(self): 
        this = _annchienta.new_AudioManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_AudioManager
    __del__ = lambda self : None;
AudioManager_swigregister = _annchienta.AudioManager_swigregister
AudioManager_swigregister(AudioManager)


def getAudioManager():
  return _annchienta.getAudioManager()
getAudioManager = _annchienta.getAudioManager
UnknownCacheable = _annchienta.UnknownCacheable
SurfaceCacheable = _annchienta.SurfaceCacheable
MaskCacheable = _annchienta.MaskCacheable
SoundCacheable = _annchienta.SoundCacheable
class Cacheable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cacheable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cacheable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == Cacheable:
            _self = None
        else:
            _self = self
        this = _annchienta.new_Cacheable(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_Cacheable
    __del__ = lambda self : None;
    def getCacheableType(self): return _annchienta.Cacheable_getCacheableType(self)
    def getFileName(self): return _annchienta.Cacheable_getFileName(self)
    def __disown__(self):
        self.this.disown()
        _annchienta.disown_Cacheable(self)
        return weakref_proxy(self)
Cacheable_swigregister = _annchienta.Cacheable_swigregister
Cacheable_swigregister(Cacheable)

class CacheManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CacheManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CacheManager, name)
    __repr__ = _swig_repr
    def getCacheable(self, *args): return _annchienta.CacheManager_getCacheable(self, *args)
    def getSurface(self, *args): return _annchienta.CacheManager_getSurface(self, *args)
    def getMask(self, *args): return _annchienta.CacheManager_getMask(self, *args)
    def getSound(self, *args): return _annchienta.CacheManager_getSound(self, *args)
    def clear(self): return _annchienta.CacheManager_clear(self)
    def __init__(self): 
        this = _annchienta.new_CacheManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_CacheManager
    __del__ = lambda self : None;
CacheManager_swigregister = _annchienta.CacheManager_swigregister
CacheManager_swigregister(CacheManager)


def getCacheManager():
  return _annchienta.getCacheManager()
getCacheManager = _annchienta.getCacheManager
class MathManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MathManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MathManager, name)
    __repr__ = _swig_repr
    def nearestPowerOfTwo(self, *args): return _annchienta.MathManager_nearestPowerOfTwo(self, *args)
    def newRandomSeed(self): return _annchienta.MathManager_newRandomSeed(self)
    def randInt(self, *args): return _annchienta.MathManager_randInt(self, *args)
    def randFloat(self, *args): return _annchienta.MathManager_randFloat(self, *args)
    def min(self, *args): return _annchienta.MathManager_min(self, *args)
    def max(self, *args): return _annchienta.MathManager_max(self, *args)
    def abs(self, *args): return _annchienta.MathManager_abs(self, *args)
    def __init__(self): 
        this = _annchienta.new_MathManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_MathManager
    __del__ = lambda self : None;
MathManager_swigregister = _annchienta.MathManager_swigregister
MathManager_swigregister(MathManager)


def getMathManager():
  return _annchienta.getMathManager()
getMathManager = _annchienta.getMathManager
class Surface(Cacheable):
    __swig_setmethods__ = {}
    for _s in [Cacheable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface, name, value)
    __swig_getmethods__ = {}
    for _s in [Cacheable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Surface, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == Surface:
            _self = None
        else:
            _self = self
        this = _annchienta.new_Surface(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_Surface
    __del__ = lambda self : None;
    def getCacheableType(self): return _annchienta.Surface_getCacheableType(self)
    def getWidth(self): return _annchienta.Surface_getWidth(self)
    def getHeight(self): return _annchienta.Surface_getHeight(self)
    def setLinearScaling(self): return _annchienta.Surface_setLinearScaling(self)
    def setNearestScaling(self): return _annchienta.Surface_setNearestScaling(self)
    def __disown__(self):
        self.this.disown()
        _annchienta.disown_Surface(self)
        return weakref_proxy(self)
Surface_swigregister = _annchienta.Surface_swigregister
Surface_swigregister(Surface)

class Font(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Font, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Font, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _annchienta.new_Font(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_Font
    __del__ = lambda self : None;
    def getHeight(self): return _annchienta.Font_getHeight(self)
    def getLineHeight(self): return _annchienta.Font_getLineHeight(self)
    def getStringWidth(self, *args): return _annchienta.Font_getStringWidth(self, *args)
Font_swigregister = _annchienta.Font_swigregister
Font_swigregister(Font)

class Sound(Cacheable):
    __swig_setmethods__ = {}
    for _s in [Cacheable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sound, name, value)
    __swig_getmethods__ = {}
    for _s in [Cacheable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == Sound:
            _self = None
        else:
            _self = self
        this = _annchienta.new_Sound(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_Sound
    __del__ = lambda self : None;
    def getCacheableType(self): return _annchienta.Sound_getCacheableType(self)
    def __disown__(self):
        self.this.disown()
        _annchienta.disown_Sound(self)
        return weakref_proxy(self)
Sound_swigregister = _annchienta.Sound_swigregister
Sound_swigregister(Sound)

class Layer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Layer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _annchienta.new_Layer()
        try: self.this.append(this)
        except: self.this = this
    def setOpacity(self, opacity = 255): return _annchienta.Layer_setOpacity(self, opacity)
    def getOpacity(self): return _annchienta.Layer_getOpacity(self)
    def setZ(self, *args): return _annchienta.Layer_setZ(self, *args)
    def getZ(self): return _annchienta.Layer_getZ(self)
    def update(self): return _annchienta.Layer_update(self)
    def draw(self): return _annchienta.Layer_draw(self)
    def depthSort(self): return _annchienta.Layer_depthSort(self)
    def addObject(self, *args): return _annchienta.Layer_addObject(self, *args)
    def addArea(self, *args): return _annchienta.Layer_addArea(self, *args)
    def makeEmpty(self): return _annchienta.Layer_makeEmpty(self)
    def setTileSet(self, *args): return _annchienta.Layer_setTileSet(self, *args)
    def getTileSet(self): return _annchienta.Layer_getTileSet(self)
    def getWidth(self): return _annchienta.Layer_getWidth(self)
    def getHeight(self): return _annchienta.Layer_getHeight(self)
    def getTile(self, *args): return _annchienta.Layer_getTile(self, *args)
    def getObject(self, *args): return _annchienta.Layer_getObject(self, *args)
    def getNumberOfObjects(self): return _annchienta.Layer_getNumberOfObjects(self)
    def removeObject(self, *args): return _annchienta.Layer_removeObject(self, *args)
    def getArea(self, *args): return _annchienta.Layer_getArea(self, *args)
    def getNumberOfAreas(self): return _annchienta.Layer_getNumberOfAreas(self)
    __swig_destroy__ = _annchienta.delete_Layer
    __del__ = lambda self : None;
Layer_swigregister = _annchienta.Layer_swigregister
Layer_swigregister(Layer)

class Map(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Map, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _annchienta.new_Map(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_Map
    __del__ = lambda self : None;
    def getCurrentLayer(self): return _annchienta.Map_getCurrentLayer(self)
    def getLayer(self, *args): return _annchienta.Map_getLayer(self, *args)
    def getCurrentLayerIndex(self): return _annchienta.Map_getCurrentLayerIndex(self)
    def setCurrentLayer(self, *args): return _annchienta.Map_setCurrentLayer(self, *args)
    def getNumberOfLayers(self): return _annchienta.Map_getNumberOfLayers(self)
    def getFileName(self): return _annchienta.Map_getFileName(self)
    def getWidth(self): return _annchienta.Map_getWidth(self)
    def getHeight(self): return _annchienta.Map_getHeight(self)
    def addNewLayer(self, z = 0): return _annchienta.Map_addNewLayer(self, z)
    def getTileSet(self): return _annchienta.Map_getTileSet(self)
    def getObject(self, *args): return _annchienta.Map_getObject(self, *args)
    def getPerson(self, *args): return _annchienta.Map_getPerson(self, *args)
    def addObject(self, *args): return _annchienta.Map_addObject(self, *args)
    def removeObject(self, *args): return _annchienta.Map_removeObject(self, *args)
    def update(self): return _annchienta.Map_update(self)
    def draw(self, scripts = True): return _annchienta.Map_draw(self, scripts)
    def depthSort(self): return _annchienta.Map_depthSort(self)
    def sortLayers(self): return _annchienta.Map_sortLayers(self)
    def onPreRender(self): return _annchienta.Map_onPreRender(self)
    def onPostRender(self): return _annchienta.Map_onPostRender(self)
Map_swigregister = _annchienta.Map_swigregister
Map_swigregister(Map)

TileEntity = _annchienta.TileEntity
StaticObjectEntity = _annchienta.StaticObjectEntity
PersonEntity = _annchienta.PersonEntity
class Entity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Entity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Entity, name)
    __repr__ = _swig_repr
    def __init__(self, name = "none"): 
        if self.__class__ == Entity:
            _self = None
        else:
            _self = self
        this = _annchienta.new_Entity(_self, name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_Entity
    __del__ = lambda self : None;
    def getEntityType(self): return _annchienta.Entity_getEntityType(self)
    def draw(self): return _annchienta.Entity_draw(self)
    def update(self): return _annchienta.Entity_update(self)
    def getDepth(self): return _annchienta.Entity_getDepth(self)
    def getMask(self): return _annchienta.Entity_getMask(self)
    def getMaskPosition(self): return _annchienta.Entity_getMaskPosition(self)
    def collidesWith(self, *args): return _annchienta.Entity_collidesWith(self, *args)
    def setDrawn(self, *args): return _annchienta.Entity_setDrawn(self, *args)
    def isDrawn(self): return _annchienta.Entity_isDrawn(self)
    def setName(self, *args): return _annchienta.Entity_setName(self, *args)
    def getName(self): return _annchienta.Entity_getName(self)
    def setLayer(self, *args): return _annchienta.Entity_setLayer(self, *args)
    def getLayer(self): return _annchienta.Entity_getLayer(self)
    def __disown__(self):
        self.this.disown()
        _annchienta.disown_Entity(self)
        return weakref_proxy(self)
Entity_swigregister = _annchienta.Entity_swigregister
Entity_swigregister(Entity)

DefaultObstruction = _annchienta.DefaultObstruction
NoObstruction = _annchienta.NoObstruction
FullObstruction = _annchienta.FullObstruction
class Tile(Entity):
    __swig_setmethods__ = {}
    for _s in [Entity]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tile, name, value)
    __swig_getmethods__ = {}
    for _s in [Entity]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Tile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == Tile:
            _self = None
        else:
            _self = self
        this = _annchienta.new_Tile(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_Tile
    __del__ = lambda self : None;
    def getEntityType(self): return _annchienta.Tile_getEntityType(self)
    def update(self): return _annchienta.Tile_update(self)
    def draw(self): return _annchienta.Tile_draw(self)
    def getDepth(self): return _annchienta.Tile_getDepth(self)
    def getMask(self): return _annchienta.Tile_getMask(self)
    def hasPoint(self, *args): return _annchienta.Tile_hasPoint(self, *args)
    def isNullTile(self): return _annchienta.Tile_isNullTile(self)
    def setZ(self, *args): return _annchienta.Tile_setZ(self, *args)
    def getZ(self, *args): return _annchienta.Tile_getZ(self, *args)
    def getPointPointer(self, *args): return _annchienta.Tile_getPointPointer(self, *args)
    def setSurface(self, *args): return _annchienta.Tile_setSurface(self, *args)
    def setSideSurface(self, *args): return _annchienta.Tile_setSideSurface(self, *args)
    def setSideSurfaceOffset(self, *args): return _annchienta.Tile_setSideSurfaceOffset(self, *args)
    def getSurface(self, *args): return _annchienta.Tile_getSurface(self, *args)
    def getSideSurface(self): return _annchienta.Tile_getSideSurface(self)
    def getSideSurfaceOffset(self): return _annchienta.Tile_getSideSurfaceOffset(self)
    def setShadowed(self, *args): return _annchienta.Tile_setShadowed(self, *args)
    def isShadowed(self): return _annchienta.Tile_isShadowed(self)
    def setVisualIndication(self, *args): return _annchienta.Tile_setVisualIndication(self, *args)
    def hasVisualIndication(self): return _annchienta.Tile_hasVisualIndication(self)
    def setObstructionType(self, *args): return _annchienta.Tile_setObstructionType(self, *args)
    def getObstructionType(self): return _annchienta.Tile_getObstructionType(self)
    def __disown__(self):
        self.this.disown()
        _annchienta.disown_Tile(self)
        return weakref_proxy(self)
Tile_swigregister = _annchienta.Tile_swigregister
Tile_swigregister(Tile)

class TileSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TileSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TileSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _annchienta.new_TileSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_TileSet
    __del__ = lambda self : None;
    def getSurface(self, *args): return _annchienta.TileSet_getSurface(self, *args)
    def getSideSurface(self, *args): return _annchienta.TileSet_getSideSurface(self, *args)
    def getMask(self): return _annchienta.TileSet_getMask(self)
    def getDirectory(self): return _annchienta.TileSet_getDirectory(self)
    def getNumberOfSurfaces(self): return _annchienta.TileSet_getNumberOfSurfaces(self)
    def getNumberOfSideSurfaces(self): return _annchienta.TileSet_getNumberOfSideSurfaces(self)
TileSet_swigregister = _annchienta.TileSet_swigregister
TileSet_swigregister(TileSet)

class Mask(Cacheable):
    __swig_setmethods__ = {}
    for _s in [Cacheable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mask, name, value)
    __swig_getmethods__ = {}
    for _s in [Cacheable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Mask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == Mask:
            _self = None
        else:
            _self = self
        this = _annchienta.new_Mask(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_Mask
    __del__ = lambda self : None;
    def getCacheableType(self): return _annchienta.Mask_getCacheableType(self)
    def getWidth(self): return _annchienta.Mask_getWidth(self)
    def getHeight(self): return _annchienta.Mask_getHeight(self)
    def collision(self, *args): return _annchienta.Mask_collision(self, *args)
    def fillRectangle(self, *args): return _annchienta.Mask_fillRectangle(self, *args)
    def __disown__(self):
        self.this.disown()
        _annchienta.disown_Mask(self)
        return weakref_proxy(self)
Mask_swigregister = _annchienta.Mask_swigregister
Mask_swigregister(Mask)

class StaticObject(Entity):
    __swig_setmethods__ = {}
    for _s in [Entity]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StaticObject, name, value)
    __swig_getmethods__ = {}
    for _s in [Entity]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StaticObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == StaticObject:
            _self = None
        else:
            _self = self
        this = _annchienta.new_StaticObject(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_StaticObject
    __del__ = lambda self : None;
    def calculateCollidingTiles(self): return _annchienta.StaticObject_calculateCollidingTiles(self)
    def getZFromCollidingTiles(self): return _annchienta.StaticObject_getZFromCollidingTiles(self)
    def collidesWithOtherObjects(self): return _annchienta.StaticObject_collidesWithOtherObjects(self)
    def getEntityType(self): return _annchienta.StaticObject_getEntityType(self)
    def update(self): return _annchienta.StaticObject_update(self)
    def draw(self): return _annchienta.StaticObject_draw(self)
    def getDepth(self): return _annchienta.StaticObject_getDepth(self)
    def getMask(self): return _annchienta.StaticObject_getMask(self)
    def setPosition(self, *args): return _annchienta.StaticObject_setPosition(self, *args)
    def getPosition(self): return _annchienta.StaticObject_getPosition(self)
    def getMaskPosition(self): return _annchienta.StaticObject_getMaskPosition(self)
    def getXmlFile(self): return _annchienta.StaticObject_getXmlFile(self)
    def setSprite(self, *args): return _annchienta.StaticObject_setSprite(self, *args)
    def getSprite(self): return _annchienta.StaticObject_getSprite(self)
    def setAnimation(self, *args): return _annchienta.StaticObject_setAnimation(self, *args)
    def getAnimation(self): return _annchienta.StaticObject_getAnimation(self)
    def setPassable(self, *args): return _annchienta.StaticObject_setPassable(self, *args)
    def isPassable(self): return _annchienta.StaticObject_isPassable(self)
    def setOnInteractScript(self, *args): return _annchienta.StaticObject_setOnInteractScript(self, *args)
    def setOnInteractCode(self, *args): return _annchienta.StaticObject_setOnInteractCode(self, *args)
    def canInteract(self): return _annchienta.StaticObject_canInteract(self)
    def onInteract(self): return _annchienta.StaticObject_onInteract(self)
    def freeze(self, *args): return _annchienta.StaticObject_freeze(self, *args)
    def stepTo(self, *args): return _annchienta.StaticObject_stepTo(self, *args)
    def setStandAnimation(self, b = False): return _annchienta.StaticObject_setStandAnimation(self, b)
    def lookAt(self, *args): return _annchienta.StaticObject_lookAt(self, *args)
    def __disown__(self):
        self.this.disown()
        _annchienta.disown_StaticObject(self)
        return weakref_proxy(self)
StaticObject_swigregister = _annchienta.StaticObject_swigregister
StaticObject_swigregister(StaticObject)


def getActiveObject():
  return _annchienta.getActiveObject()
getActiveObject = _annchienta.getActiveObject

def getPassiveObject():
  return _annchienta.getPassiveObject()
getPassiveObject = _annchienta.getPassiveObject
class Person(StaticObject):
    __swig_setmethods__ = {}
    for _s in [StaticObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Person, name, value)
    __swig_getmethods__ = {}
    for _s in [StaticObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Person, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == Person:
            _self = None
        else:
            _self = self
        this = _annchienta.new_Person(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_Person
    __del__ = lambda self : None;
    def getEntityType(self): return _annchienta.Person_getEntityType(self)
    def setSpeed(self, *args): return _annchienta.Person_setSpeed(self, *args)
    def getSpeed(self): return _annchienta.Person_getSpeed(self)
    def update(self): return _annchienta.Person_update(self)
    def move(self, *args): return _annchienta.Person_move(self, *args)
    def stepTo(self, *args): return _annchienta.Person_stepTo(self, *args)
    def freeze(self, *args): return _annchienta.Person_freeze(self, *args)
    def isFrozen(self): return _annchienta.Person_isFrozen(self)
    def setControl(self, *args): return _annchienta.Person_setControl(self, *args)
    def setInputControl(self): return _annchienta.Person_setInputControl(self)
    def setSampleControl(self): return _annchienta.Person_setSampleControl(self)
    def setNullControl(self): return _annchienta.Person_setNullControl(self)
    def setStandAnimation(self, forceFromHeading = False): return _annchienta.Person_setStandAnimation(self, forceFromHeading)
    def lookAt(self, *args): return _annchienta.Person_lookAt(self, *args)
    def collisionWithLayerAreas(self): return _annchienta.Person_collisionWithLayerAreas(self)
    def __disown__(self):
        self.this.disown()
        _annchienta.disown_Person(self)
        return weakref_proxy(self)
Person_swigregister = _annchienta.Person_swigregister
Person_swigregister(Person)

class Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _annchienta.Vector_x_set
    __swig_getmethods__["x"] = _annchienta.Vector_x_get
    if _newclass:x = _swig_property(_annchienta.Vector_x_get, _annchienta.Vector_x_set)
    __swig_setmethods__["y"] = _annchienta.Vector_y_set
    __swig_getmethods__["y"] = _annchienta.Vector_y_get
    if _newclass:y = _swig_property(_annchienta.Vector_y_get, _annchienta.Vector_y_set)
    def __init__(self, *args): 
        this = _annchienta.new_Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_Vector
    __del__ = lambda self : None;
    def __add__(self, *args): return _annchienta.Vector___add__(self, *args)
    def __sub__(self, *args): return _annchienta.Vector___sub__(self, *args)
    def __div__(self, *args): return _annchienta.Vector___div__(self, *args)
    def __iadd__(self, *args): return _annchienta.Vector___iadd__(self, *args)
    def __isub__(self, *args): return _annchienta.Vector___isub__(self, *args)
    def __imul__(self, *args): return _annchienta.Vector___imul__(self, *args)
    def __idiv__(self, *args): return _annchienta.Vector___idiv__(self, *args)
    def __mul__(self, *args): return _annchienta.Vector___mul__(self, *args)
    def length(self): return _annchienta.Vector_length(self)
    def lengthSquared(self): return _annchienta.Vector_lengthSquared(self)
    def distance(self, *args): return _annchienta.Vector_distance(self, *args)
    def normalize(self): return _annchienta.Vector_normalize(self)
    def cap(self, *args): return _annchienta.Vector_cap(self, *args)
    def fromPolar(self, *args): return _annchienta.Vector_fromPolar(self, *args)
    def getAngle(self): return _annchienta.Vector_getAngle(self)
Vector_swigregister = _annchienta.Vector_swigregister
Vector_swigregister(Vector)

class PersonControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PersonControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PersonControl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == PersonControl:
            _self = None
        else:
            _self = self
        this = _annchienta.new_PersonControl(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_PersonControl
    __del__ = lambda self : None;
    def affect(self): return _annchienta.PersonControl_affect(self)
    def __disown__(self):
        self.this.disown()
        _annchienta.disown_PersonControl(self)
        return weakref_proxy(self)
PersonControl_swigregister = _annchienta.PersonControl_swigregister
PersonControl_swigregister(PersonControl)

class SamplePersonControl(PersonControl):
    __swig_setmethods__ = {}
    for _s in [PersonControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SamplePersonControl, name, value)
    __swig_getmethods__ = {}
    for _s in [PersonControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SamplePersonControl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == SamplePersonControl:
            _self = None
        else:
            _self = self
        this = _annchienta.new_SamplePersonControl(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_SamplePersonControl
    __del__ = lambda self : None;
    def affect(self): return _annchienta.SamplePersonControl_affect(self)
    def __disown__(self):
        self.this.disown()
        _annchienta.disown_SamplePersonControl(self)
        return weakref_proxy(self)
SamplePersonControl_swigregister = _annchienta.SamplePersonControl_swigregister
SamplePersonControl_swigregister(SamplePersonControl)

class InputPersonControl(PersonControl):
    __swig_setmethods__ = {}
    for _s in [PersonControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputPersonControl, name, value)
    __swig_getmethods__ = {}
    for _s in [PersonControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputPersonControl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == InputPersonControl:
            _self = None
        else:
            _self = self
        this = _annchienta.new_InputPersonControl(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_InputPersonControl
    __del__ = lambda self : None;
    def affect(self): return _annchienta.InputPersonControl_affect(self)
    def tryInteract(self): return _annchienta.InputPersonControl_tryInteract(self)
    def __disown__(self):
        self.this.disown()
        _annchienta.disown_InputPersonControl(self)
        return weakref_proxy(self)
InputPersonControl_swigregister = _annchienta.InputPersonControl_swigregister
InputPersonControl_swigregister(InputPersonControl)

class FollowPathPersonControl(PersonControl):
    __swig_setmethods__ = {}
    for _s in [PersonControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FollowPathPersonControl, name, value)
    __swig_getmethods__ = {}
    for _s in [PersonControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FollowPathPersonControl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == FollowPathPersonControl:
            _self = None
        else:
            _self = self
        this = _annchienta.new_FollowPathPersonControl(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annchienta.delete_FollowPathPersonControl
    __del__ = lambda self : None;
    def affect(self): return _annchienta.FollowPathPersonControl_affect(self)
    def addPoint(self, *args): return _annchienta.FollowPathPersonControl_addPoint(self, *args)
    def __disown__(self):
        self.this.disown()
        _annchienta.disown_FollowPathPersonControl(self)
        return weakref_proxy(self)
FollowPathPersonControl_swigregister = _annchienta.FollowPathPersonControl_swigregister
FollowPathPersonControl_swigregister(FollowPathPersonControl)

SDLK_UNKNOWN = _annchienta.SDLK_UNKNOWN
SDLK_FIRST = _annchienta.SDLK_FIRST
SDLK_BACKSPACE = _annchienta.SDLK_BACKSPACE
SDLK_TAB = _annchienta.SDLK_TAB
SDLK_CLEAR = _annchienta.SDLK_CLEAR
SDLK_RETURN = _annchienta.SDLK_RETURN
SDLK_PAUSE = _annchienta.SDLK_PAUSE
SDLK_ESCAPE = _annchienta.SDLK_ESCAPE
SDLK_SPACE = _annchienta.SDLK_SPACE
SDLK_EXCLAIM = _annchienta.SDLK_EXCLAIM
SDLK_QUOTEDBL = _annchienta.SDLK_QUOTEDBL
SDLK_HASH = _annchienta.SDLK_HASH
SDLK_DOLLAR = _annchienta.SDLK_DOLLAR
SDLK_AMPERSAND = _annchienta.SDLK_AMPERSAND
SDLK_QUOTE = _annchienta.SDLK_QUOTE
SDLK_LEFTPAREN = _annchienta.SDLK_LEFTPAREN
SDLK_RIGHTPAREN = _annchienta.SDLK_RIGHTPAREN
SDLK_ASTERISK = _annchienta.SDLK_ASTERISK
SDLK_PLUS = _annchienta.SDLK_PLUS
SDLK_COMMA = _annchienta.SDLK_COMMA
SDLK_MINUS = _annchienta.SDLK_MINUS
SDLK_PERIOD = _annchienta.SDLK_PERIOD
SDLK_SLASH = _annchienta.SDLK_SLASH
SDLK_0 = _annchienta.SDLK_0
SDLK_1 = _annchienta.SDLK_1
SDLK_2 = _annchienta.SDLK_2
SDLK_3 = _annchienta.SDLK_3
SDLK_4 = _annchienta.SDLK_4
SDLK_5 = _annchienta.SDLK_5
SDLK_6 = _annchienta.SDLK_6
SDLK_7 = _annchienta.SDLK_7
SDLK_8 = _annchienta.SDLK_8
SDLK_9 = _annchienta.SDLK_9
SDLK_COLON = _annchienta.SDLK_COLON
SDLK_SEMICOLON = _annchienta.SDLK_SEMICOLON
SDLK_LESS = _annchienta.SDLK_LESS
SDLK_EQUALS = _annchienta.SDLK_EQUALS
SDLK_GREATER = _annchienta.SDLK_GREATER
SDLK_QUESTION = _annchienta.SDLK_QUESTION
SDLK_AT = _annchienta.SDLK_AT
SDLK_LEFTBRACKET = _annchienta.SDLK_LEFTBRACKET
SDLK_BACKSLASH = _annchienta.SDLK_BACKSLASH
SDLK_RIGHTBRACKET = _annchienta.SDLK_RIGHTBRACKET
SDLK_CARET = _annchienta.SDLK_CARET
SDLK_UNDERSCORE = _annchienta.SDLK_UNDERSCORE
SDLK_BACKQUOTE = _annchienta.SDLK_BACKQUOTE
SDLK_a = _annchienta.SDLK_a
SDLK_b = _annchienta.SDLK_b
SDLK_c = _annchienta.SDLK_c
SDLK_d = _annchienta.SDLK_d
SDLK_e = _annchienta.SDLK_e
SDLK_f = _annchienta.SDLK_f
SDLK_g = _annchienta.SDLK_g
SDLK_h = _annchienta.SDLK_h
SDLK_i = _annchienta.SDLK_i
SDLK_j = _annchienta.SDLK_j
SDLK_k = _annchienta.SDLK_k
SDLK_l = _annchienta.SDLK_l
SDLK_m = _annchienta.SDLK_m
SDLK_n = _annchienta.SDLK_n
SDLK_o = _annchienta.SDLK_o
SDLK_p = _annchienta.SDLK_p
SDLK_q = _annchienta.SDLK_q
SDLK_r = _annchienta.SDLK_r
SDLK_s = _annchienta.SDLK_s
SDLK_t = _annchienta.SDLK_t
SDLK_u = _annchienta.SDLK_u
SDLK_v = _annchienta.SDLK_v
SDLK_w = _annchienta.SDLK_w
SDLK_x = _annchienta.SDLK_x
SDLK_y = _annchienta.SDLK_y
SDLK_z = _annchienta.SDLK_z
SDLK_DELETE = _annchienta.SDLK_DELETE
SDLK_WORLD_0 = _annchienta.SDLK_WORLD_0
SDLK_WORLD_1 = _annchienta.SDLK_WORLD_1
SDLK_WORLD_2 = _annchienta.SDLK_WORLD_2
SDLK_WORLD_3 = _annchienta.SDLK_WORLD_3
SDLK_WORLD_4 = _annchienta.SDLK_WORLD_4
SDLK_WORLD_5 = _annchienta.SDLK_WORLD_5
SDLK_WORLD_6 = _annchienta.SDLK_WORLD_6
SDLK_WORLD_7 = _annchienta.SDLK_WORLD_7
SDLK_WORLD_8 = _annchienta.SDLK_WORLD_8
SDLK_WORLD_9 = _annchienta.SDLK_WORLD_9
SDLK_WORLD_10 = _annchienta.SDLK_WORLD_10
SDLK_WORLD_11 = _annchienta.SDLK_WORLD_11
SDLK_WORLD_12 = _annchienta.SDLK_WORLD_12
SDLK_WORLD_13 = _annchienta.SDLK_WORLD_13
SDLK_WORLD_14 = _annchienta.SDLK_WORLD_14
SDLK_WORLD_15 = _annchienta.SDLK_WORLD_15
SDLK_WORLD_16 = _annchienta.SDLK_WORLD_16
SDLK_WORLD_17 = _annchienta.SDLK_WORLD_17
SDLK_WORLD_18 = _annchienta.SDLK_WORLD_18
SDLK_WORLD_19 = _annchienta.SDLK_WORLD_19
SDLK_WORLD_20 = _annchienta.SDLK_WORLD_20
SDLK_WORLD_21 = _annchienta.SDLK_WORLD_21
SDLK_WORLD_22 = _annchienta.SDLK_WORLD_22
SDLK_WORLD_23 = _annchienta.SDLK_WORLD_23
SDLK_WORLD_24 = _annchienta.SDLK_WORLD_24
SDLK_WORLD_25 = _annchienta.SDLK_WORLD_25
SDLK_WORLD_26 = _annchienta.SDLK_WORLD_26
SDLK_WORLD_27 = _annchienta.SDLK_WORLD_27
SDLK_WORLD_28 = _annchienta.SDLK_WORLD_28
SDLK_WORLD_29 = _annchienta.SDLK_WORLD_29
SDLK_WORLD_30 = _annchienta.SDLK_WORLD_30
SDLK_WORLD_31 = _annchienta.SDLK_WORLD_31
SDLK_WORLD_32 = _annchienta.SDLK_WORLD_32
SDLK_WORLD_33 = _annchienta.SDLK_WORLD_33
SDLK_WORLD_34 = _annchienta.SDLK_WORLD_34
SDLK_WORLD_35 = _annchienta.SDLK_WORLD_35
SDLK_WORLD_36 = _annchienta.SDLK_WORLD_36
SDLK_WORLD_37 = _annchienta.SDLK_WORLD_37
SDLK_WORLD_38 = _annchienta.SDLK_WORLD_38
SDLK_WORLD_39 = _annchienta.SDLK_WORLD_39
SDLK_WORLD_40 = _annchienta.SDLK_WORLD_40
SDLK_WORLD_41 = _annchienta.SDLK_WORLD_41
SDLK_WORLD_42 = _annchienta.SDLK_WORLD_42
SDLK_WORLD_43 = _annchienta.SDLK_WORLD_43
SDLK_WORLD_44 = _annchienta.SDLK_WORLD_44
SDLK_WORLD_45 = _annchienta.SDLK_WORLD_45
SDLK_WORLD_46 = _annchienta.SDLK_WORLD_46
SDLK_WORLD_47 = _annchienta.SDLK_WORLD_47
SDLK_WORLD_48 = _annchienta.SDLK_WORLD_48
SDLK_WORLD_49 = _annchienta.SDLK_WORLD_49
SDLK_WORLD_50 = _annchienta.SDLK_WORLD_50
SDLK_WORLD_51 = _annchienta.SDLK_WORLD_51
SDLK_WORLD_52 = _annchienta.SDLK_WORLD_52
SDLK_WORLD_53 = _annchienta.SDLK_WORLD_53
SDLK_WORLD_54 = _annchienta.SDLK_WORLD_54
SDLK_WORLD_55 = _annchienta.SDLK_WORLD_55
SDLK_WORLD_56 = _annchienta.SDLK_WORLD_56
SDLK_WORLD_57 = _annchienta.SDLK_WORLD_57
SDLK_WORLD_58 = _annchienta.SDLK_WORLD_58
SDLK_WORLD_59 = _annchienta.SDLK_WORLD_59
SDLK_WORLD_60 = _annchienta.SDLK_WORLD_60
SDLK_WORLD_61 = _annchienta.SDLK_WORLD_61
SDLK_WORLD_62 = _annchienta.SDLK_WORLD_62
SDLK_WORLD_63 = _annchienta.SDLK_WORLD_63
SDLK_WORLD_64 = _annchienta.SDLK_WORLD_64
SDLK_WORLD_65 = _annchienta.SDLK_WORLD_65
SDLK_WORLD_66 = _annchienta.SDLK_WORLD_66
SDLK_WORLD_67 = _annchienta.SDLK_WORLD_67
SDLK_WORLD_68 = _annchienta.SDLK_WORLD_68
SDLK_WORLD_69 = _annchienta.SDLK_WORLD_69
SDLK_WORLD_70 = _annchienta.SDLK_WORLD_70
SDLK_WORLD_71 = _annchienta.SDLK_WORLD_71
SDLK_WORLD_72 = _annchienta.SDLK_WORLD_72
SDLK_WORLD_73 = _annchienta.SDLK_WORLD_73
SDLK_WORLD_74 = _annchienta.SDLK_WORLD_74
SDLK_WORLD_75 = _annchienta.SDLK_WORLD_75
SDLK_WORLD_76 = _annchienta.SDLK_WORLD_76
SDLK_WORLD_77 = _annchienta.SDLK_WORLD_77
SDLK_WORLD_78 = _annchienta.SDLK_WORLD_78
SDLK_WORLD_79 = _annchienta.SDLK_WORLD_79
SDLK_WORLD_80 = _annchienta.SDLK_WORLD_80
SDLK_WORLD_81 = _annchienta.SDLK_WORLD_81
SDLK_WORLD_82 = _annchienta.SDLK_WORLD_82
SDLK_WORLD_83 = _annchienta.SDLK_WORLD_83
SDLK_WORLD_84 = _annchienta.SDLK_WORLD_84
SDLK_WORLD_85 = _annchienta.SDLK_WORLD_85
SDLK_WORLD_86 = _annchienta.SDLK_WORLD_86
SDLK_WORLD_87 = _annchienta.SDLK_WORLD_87
SDLK_WORLD_88 = _annchienta.SDLK_WORLD_88
SDLK_WORLD_89 = _annchienta.SDLK_WORLD_89
SDLK_WORLD_90 = _annchienta.SDLK_WORLD_90
SDLK_WORLD_91 = _annchienta.SDLK_WORLD_91
SDLK_WORLD_92 = _annchienta.SDLK_WORLD_92
SDLK_WORLD_93 = _annchienta.SDLK_WORLD_93
SDLK_WORLD_94 = _annchienta.SDLK_WORLD_94
SDLK_WORLD_95 = _annchienta.SDLK_WORLD_95
SDLK_KP0 = _annchienta.SDLK_KP0
SDLK_KP1 = _annchienta.SDLK_KP1
SDLK_KP2 = _annchienta.SDLK_KP2
SDLK_KP3 = _annchienta.SDLK_KP3
SDLK_KP4 = _annchienta.SDLK_KP4
SDLK_KP5 = _annchienta.SDLK_KP5
SDLK_KP6 = _annchienta.SDLK_KP6
SDLK_KP7 = _annchienta.SDLK_KP7
SDLK_KP8 = _annchienta.SDLK_KP8
SDLK_KP9 = _annchienta.SDLK_KP9
SDLK_KP_PERIOD = _annchienta.SDLK_KP_PERIOD
SDLK_KP_DIVIDE = _annchienta.SDLK_KP_DIVIDE
SDLK_KP_MULTIPLY = _annchienta.SDLK_KP_MULTIPLY
SDLK_KP_MINUS = _annchienta.SDLK_KP_MINUS
SDLK_KP_PLUS = _annchienta.SDLK_KP_PLUS
SDLK_KP_ENTER = _annchienta.SDLK_KP_ENTER
SDLK_KP_EQUALS = _annchienta.SDLK_KP_EQUALS
SDLK_UP = _annchienta.SDLK_UP
SDLK_DOWN = _annchienta.SDLK_DOWN
SDLK_RIGHT = _annchienta.SDLK_RIGHT
SDLK_LEFT = _annchienta.SDLK_LEFT
SDLK_INSERT = _annchienta.SDLK_INSERT
SDLK_HOME = _annchienta.SDLK_HOME
SDLK_END = _annchienta.SDLK_END
SDLK_PAGEUP = _annchienta.SDLK_PAGEUP
SDLK_PAGEDOWN = _annchienta.SDLK_PAGEDOWN
SDLK_F1 = _annchienta.SDLK_F1
SDLK_F2 = _annchienta.SDLK_F2
SDLK_F3 = _annchienta.SDLK_F3
SDLK_F4 = _annchienta.SDLK_F4
SDLK_F5 = _annchienta.SDLK_F5
SDLK_F6 = _annchienta.SDLK_F6
SDLK_F7 = _annchienta.SDLK_F7
SDLK_F8 = _annchienta.SDLK_F8
SDLK_F9 = _annchienta.SDLK_F9
SDLK_F10 = _annchienta.SDLK_F10
SDLK_F11 = _annchienta.SDLK_F11
SDLK_F12 = _annchienta.SDLK_F12
SDLK_F13 = _annchienta.SDLK_F13
SDLK_F14 = _annchienta.SDLK_F14
SDLK_F15 = _annchienta.SDLK_F15
SDLK_NUMLOCK = _annchienta.SDLK_NUMLOCK
SDLK_CAPSLOCK = _annchienta.SDLK_CAPSLOCK
SDLK_SCROLLOCK = _annchienta.SDLK_SCROLLOCK
SDLK_RSHIFT = _annchienta.SDLK_RSHIFT
SDLK_LSHIFT = _annchienta.SDLK_LSHIFT
SDLK_RCTRL = _annchienta.SDLK_RCTRL
SDLK_LCTRL = _annchienta.SDLK_LCTRL
SDLK_RALT = _annchienta.SDLK_RALT
SDLK_LALT = _annchienta.SDLK_LALT
SDLK_RMETA = _annchienta.SDLK_RMETA
SDLK_LMETA = _annchienta.SDLK_LMETA
SDLK_LSUPER = _annchienta.SDLK_LSUPER
SDLK_RSUPER = _annchienta.SDLK_RSUPER
SDLK_MODE = _annchienta.SDLK_MODE
SDLK_COMPOSE = _annchienta.SDLK_COMPOSE
SDLK_HELP = _annchienta.SDLK_HELP
SDLK_PRINT = _annchienta.SDLK_PRINT
SDLK_SYSREQ = _annchienta.SDLK_SYSREQ
SDLK_BREAK = _annchienta.SDLK_BREAK
SDLK_MENU = _annchienta.SDLK_MENU
SDLK_POWER = _annchienta.SDLK_POWER
SDLK_EURO = _annchienta.SDLK_EURO
SDLK_UNDO = _annchienta.SDLK_UNDO
SDLK_LAST = _annchienta.SDLK_LAST
KMOD_NONE = _annchienta.KMOD_NONE
KMOD_LSHIFT = _annchienta.KMOD_LSHIFT
KMOD_RSHIFT = _annchienta.KMOD_RSHIFT
KMOD_LCTRL = _annchienta.KMOD_LCTRL
KMOD_RCTRL = _annchienta.KMOD_RCTRL
KMOD_LALT = _annchienta.KMOD_LALT
KMOD_RALT = _annchienta.KMOD_RALT
KMOD_LMETA = _annchienta.KMOD_LMETA
KMOD_RMETA = _annchienta.KMOD_RMETA
KMOD_NUM = _annchienta.KMOD_NUM
KMOD_CAPS = _annchienta.KMOD_CAPS
KMOD_MODE = _annchienta.KMOD_MODE
KMOD_RESERVED = _annchienta.KMOD_RESERVED


